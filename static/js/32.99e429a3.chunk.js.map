{"version":3,"file":"static/js/32.99e429a3.chunk.js","mappings":"uQAGA,MAAMA,EAAoBA,CAACC,EAAUC,KACnCA,EAAUC,OAAOC,OAAO,CACtBC,YAAY,EACZC,IAAK,MACJJ,GACH,MAAMK,GAAWC,EAAAA,EAAAA,SAAO,GAClBC,GAAMC,EAAAA,EAAAA,IAAgB,MACD,IAArBH,EAASI,SACXV,IAEFM,EAASI,SAAU,CAAK,IAoB1B,OAlBAC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAUA,KACTX,EAAQG,aACXE,EAASI,SAAU,EACrB,EAEIG,EAAeA,KACfZ,EAAQG,aACVE,EAASI,SAAU,EACrB,EAIF,OAFAF,EAAIE,QAAQI,iBAAiB,QAASF,GAAS,GAC/CJ,EAAIE,QAAQI,iBAAiB,QAASD,GAAc,GAC7C,KACLL,EAAIE,SAAWF,EAAIE,QAAQK,oBAAoB,QAASH,GACxDJ,EAAIE,SAAWF,EAAIE,QAAQK,oBAAoB,QAASF,EAAa,CACtE,GACA,IACIL,CAAG,EC7BZ,MCJ0E,GAAgBQ,kBDIrE,CACjBC,KAAM,sBACNC,QAAS,6mCAKTC,YAAa,qEACbC,YAAa,2BACbC,IAAK,q6BA0BLC,QAAS,CACLC,QAAQ,EACRC,UAAW,4BACXC,MAAO,kHAKPC,KAAM,CAAC,CACXC,MAAO,2BACPR,YAAa,iOACbS,KAAM,geAoBNC,MAAO,CAAC,CACRZ,KAAM,qBACNG,YAAa,2BACbU,UAAW,GACb,CACEb,KAAM,QACNG,YAAa,iBACbU,U,UACF,CACEb,KAAM,QACNG,YAAa,iBACbU,U,UACF,CACEb,KAAM,WACNG,YAAa,mBACbU,U,gBCpFSC,EAAW,CAAC,KAAO,sBAAsB,QAAU,QAAQ,gBAAe,EAAK,aAAa,uBAAuB,QAAU,CAAC,CAAC,KAAO,sBAAsB,QAAU,4DAA4D,YAAc,qEAAc,YAAc,6B","sources":["../../src/index.js","../../README.md","../node_modules/readme/modules.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport useClickOutside from '@kne/use-click-outside';\n\nconst useSimulationBlur = (callback, options) => {\n  options = Object.assign({\n    strictMode: false,\n    dom: null\n  }, options);\n  const stateRef = useRef(false);\n  const ref = useClickOutside(() => {\n    if (stateRef.current === true) {\n      callback();\n    }\n    stateRef.current = false;\n  });\n  useEffect(() => {\n    const handler = () => {\n      if (!options.strictMode) {\n        stateRef.current = true;\n      }\n    };\n    const focusHandler = () => {\n      if (options.strictMode) {\n        stateRef.current = true;\n      }\n    };\n    ref.current.addEventListener('click', handler, true);\n    ref.current.addEventListener('focus', focusHandler, true);\n    return () => {\n      ref.current && ref.current.removeEventListener('click', handler);\n      ref.current && ref.current.removeEventListener('focus', focusHandler);\n    };\n  }, []);\n  return ref;\n};\n\nexport default useSimulationBlur;\n","import * as component_1 from '@kne/use-simulation-blur';\nimport * as component_2 from 'antd/lib/input';\nimport * as component_3 from 'antd/lib/space';\nimport * as component_4 from 'antd/lib/message';\nconst readmeConfig = {\n    name: `use-simulation-blur`,\n    summary: `<p>一个用来模拟失去焦点事件的钩子</p>\n<h4>为何需要使用？</h4>\n<p>在某些场景中，比如表单字段组件中，有两个输入框组合而成的复合字段，我们希望程序在用户完成两个文本框的输入时执行表单字段校验。\n我们不能利用两个输入框任何一个的onBlur事件来触发校验，因为这样时不符合用户直觉和使用逻辑的。</p>\n<p>这种情况，我们通过用户进入复合字段组件区域，完成输入，然后点击此区域外的地方来模拟触发onBlur事件来完成交互过程。</p>`,\n    description: `模拟复合组件的失去焦点`,\n    packageName: `@kne/use-simulation-blur`,\n    api: `<p>const ref = useSimulationBlur(callback, options);</p>\n<p>注意：返回的ref必须传给一个dom的ref</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>callback</td>\n<td>模拟的失去焦点事件触发后执行的回调</td>\n<td>function</td>\n<td>-</td>\n</tr>\n<tr>\n<td>options</td>\n<td>{strictMode} strictMode为是否开启严格模式，如果开启严格模式，只有容器内部的组件触发focus事件才会开启监听，通常还会监听容器的点击事件</td>\n<td>object</td>\n<td>{strictMode:false}</td>\n</tr>\n</tbody>\n</table>`,\n    example: {\n        isFull: false,\n        className: `use_simulation_blur_62cc8`,\n        style: `.use_simulation_blur_62cc8 .container {\n  display: inline-block;\n  background: #cccccc;\n  padding: 20px; }\n`,\n        list: [{\n    title: `基本示例`,\n    description: `灰色区域为组件内部，在两个输入框输入完成后点击灰色区域外面触发失去焦点事件`,\n    code: `const { default: useSimulationBlur } = _useSimulationBlur;\nconst { default: Input } = input;\nconst { default: Space } = space;\nconst { default: message } = _message;\n\nconst BaseExample = () => {\n  const ref = useSimulationBlur(() => {\n    message.success('失去焦点');\n  });\n  return <div className='container' ref={ref}>\n    <Space>\n      <Input type='text' />\n      <Input type='text' />\n    </Space>\n  </div>;\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_useSimulationBlur\",\n    packageName: \"@kne/use-simulation-blur\",\n    component: component_1\n},{\n    name: \"input\",\n    packageName: \"antd/lib/input\",\n    component: component_2\n},{\n    name: \"space\",\n    packageName: \"antd/lib/space\",\n    component: component_3\n},{\n    name: \"_message\",\n    packageName: \"antd/lib/message\",\n    component: component_4\n}]\n}]\n    }\n};\nexport default readmeConfig;\n","import UseSimulationBlur from '@components/use-simulation-blur/README.md';export default {UseSimulationBlur};\nexport const manifest = {\"name\":\"use-simulation-blur\",\"version\":\"0.1.2\",\"open-version\":true,\"public-url\":\"/use-simulation-blur\",\"modules\":[{\"name\":\"use-simulation-blur\",\"baseDir\":\"/home/runner/work/use-simulation-blur/use-simulation-blur\",\"description\":\"模拟复合组件的失去焦点\",\"packageName\":\"@kne/use-simulation-blur\"}]};"],"names":["useSimulationBlur","callback","options","Object","assign","strictMode","dom","stateRef","useRef","ref","useClickOutside","current","useEffect","handler","focusHandler","addEventListener","removeEventListener","UseSimulationBlur","name","summary","description","packageName","api","example","isFull","className","style","list","title","code","scope","component","manifest"],"sourceRoot":""}